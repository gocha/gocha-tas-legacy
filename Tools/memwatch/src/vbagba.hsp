;---------------------------------------------------------------
; vbagba.hsp: Memory Watch for VisualBoyAdvance (GBA)
;---------------------------------------------------------------

#ifndef WATCH_VBAGBA_INCLUDED
#define global WATCH_VBAGBA_INCLUDED

#include "wport.hsp"
#include "wutil.hsp"
#include "wgetset.hsp"

;---------------------------------------------------------------
; >> exe info
;---------------------------------------------------------------
#packopt name       "vbawatch"

#pack  "vbawatch.conf"

APP_NAME   = "VBA/GBA Watch"
APP_VER    = "v2 (beta)"
APP_MANUAL = "memwatch.html"

;---------------------------------------------------------------
; >> definitions
;---------------------------------------------------------------
WATCH_EMU_INIFILE     = "vbawatch.conf.txt"
WATCH_EMU_INIFILE_DEF = "vbawatch.conf"

WATCH_TITLE_MAX    = 12
WATCH_GAMEID_MAX   = 4

ini_exdef_target_param_min = 10
watch_formula_disp_max = 9

goto *WATCH_VBAGBA_EOF

;---------------------------------------------------------------
; >> emulator specific settings
;---------------------------------------------------------------
*init_settings_port
	dim wtarget_addr_bios, WTARGET_MAX
	dim wtarget_addr_wram, WTARGET_MAX
	dim wtarget_addr_iram, WTARGET_MAX
	dim wtarget_addr_iomem, WTARGET_MAX
	dim wtarget_addr_paletteram, WTARGET_MAX
	dim wtarget_addr_vram, WTARGET_MAX
	dim wtarget_addr_oam, WTARGET_MAX
	dim wtarget_addr_rom, WTARGET_MAX

	; default: vba-rerecording-19.3? (must not be important)
	wtarget_fname.0      = "vba-rerecording*.exe"
	wtarget_addr_bios.0  = 0x7245B8
	wtarget_addr_wram.0  = 0x7245C4
	wtarget_addr_iram.0  = 0x7245C0
	wtarget_addr_iomem.0 = 0x7245D8
	wtarget_addr_paletteram.0 = 0x7245C8
	wtarget_addr_vram.0  = 0x7245CC
	wtarget_addr_oam.0   = 0x7245D4
	wtarget_addr_rom.0   = 0x7245BC
return

;---------------------------------------------------------------
; >> matching game title/id
;---------------------------------------------------------------
*match_gametitle_port
	gametitle_matched = false
	if (watch_cur_gametitle != "") {
		if ((watch_cur_gametitle != gui_gametitle) & (watch_cur_gametitle != gui_gameid)) : return
	}
	gametitle_matched = true
return

;---------------------------------------------------------------
; >> set basical variables for memory reading
;---------------------------------------------------------------
*renew_vars_port_init
	proc_lpeek hProc, BIOS, wtarget_addr_bios.wtarget_id
	proc_lpeek hProc, WRAM, wtarget_addr_wram.wtarget_id
	proc_lpeek hProc, IRAM, wtarget_addr_iram.wtarget_id
	proc_lpeek hProc, IOMEM, wtarget_addr_iomem.wtarget_id
	proc_lpeek hProc, PALETTERAM, wtarget_addr_paletteram.wtarget_id
	proc_lpeek hProc, VRAM, wtarget_addr_vram.wtarget_id
	proc_lpeek hProc, OAM, wtarget_addr_oam.wtarget_id
	proc_lpeek hProc, ROM, wtarget_addr_rom.wtarget_id

	proc_memcpy hProc, wtarget_gametitle.proc_cnt, ROM + 0xa0, WATCH_TITLE_MAX, 0: poke wtarget_gametitle.proc_cnt, WATCH_TITLE_MAX, 0: removespace wtarget_gametitle.proc_cnt
	proc_memcpy hProc, wtarget_gameid.proc_cnt, ROM + 0xac, WATCH_GAMEID_MAX, 0: poke wtarget_gameid.proc_cnt, WATCH_GAMEID_MAX, 0
return

;---------------------------------------------------------------
; >> read value from memory
;---------------------------------------------------------------
*eval_formula_port_readaddr
	watch_val = 0

	eval_hex = (peek(watch_addr_str, 0) == '$')
	if (eval_hex) : getstr watch_addr_str, watch_addr_str, 1

	gosub *eval_formula_port_readaddr_uservar
	if (eval_uservar) : return

	; get raw address
	if (eval_hex) {
		watch_addr = int("$"+watch_addr_str)
	}
	else {
		watch_addr = int(watch_addr_str)
	}

	; fix target address
	watch_offset = watch_addr
	if ((watch_addr >= 0x00000000) & (watch_addr <= 0x00003FFF)) {
		targetMem = BIOS
		watch_offset -= 0x00000000
	}
	else: if ((watch_addr >= 0x02000000) & (watch_addr <= 0x0203FFFF)) {
		targetMem = WRAM
		watch_offset -= 0x02000000
	}
	else: if ((watch_addr >= 0x03000000) & (watch_addr <= 0x03007FFF)) {
		targetMem = IRAM
		watch_offset -= 0x03000000
	}
	else: if ((watch_addr >= 0x04000000) & (watch_addr <= 0x040003FF)) {
		targetMem = IOMEM
		watch_offset -= 0x04000000
	}
	else: if ((watch_addr >= 0x05000000) & (watch_addr <= 0x050003FF)) {
		targetMem = PALETTERAM
		watch_offset -= 0x05000000
	}
	else: if ((watch_addr >= 0x06000000) & (watch_addr <= 0x0601FFFF)) {
		targetMem = VRAM
		watch_offset -= 0x06000000
	}
	else: if ((watch_addr >= 0x07000000) & (watch_addr <= 0x070003FF)) {
		targetMem = OAM
		watch_offset -= 0x07000000
	}
	else: if ((watch_addr >= 0x08000000) & (watch_addr <= 0x09FFFFFF)) {
		targetMem = ROM
		watch_offset -= 0x08000000
	}
	else {
		return
	}

	proc_npeek hProc, watch_val, targetMem, watch_offset, watch_size.watch_id
return

;---------------------------------------------------------------
; >> variables for gocha :P
;---------------------------------------------------------------
*eval_formula_port_readaddr_uservar
	eval_uservar = false
#ifdef WATCH_USE_USERVAR
	if (watch_addr_str == "blah_blah") {
		watch_val = 0
		eval_uservar = true
	}
#endif
return

;---------------------------------------------------------------
; >> emulator identity
;---------------------------------------------------------------
*ini_exdef_target_port
	wtarget_addr_bios.wtarget_num   = int("$"+ini_argvex.2)
	wtarget_addr_wram.wtarget_num   = int("$"+ini_argvex.3)
	wtarget_addr_iram.wtarget_num   = int("$"+ini_argvex.4)
	wtarget_addr_iomem.wtarget_num  = int("$"+ini_argvex.5)
	wtarget_addr_paletteram.wtarget_num = int("$"+ini_argvex.6)
	wtarget_addr_vram.wtarget_num   = int("$"+ini_argvex.7)
	wtarget_addr_oam.wtarget_num    = int("$"+ini_argvex.8)
	wtarget_addr_rom.wtarget_num    = int("$"+ini_argvex.9)
return

;---------------------------------------------------------------
*WATCH_VBAGBA_EOF

#endif // !WATCH_VBAGBA_INCLUDED
