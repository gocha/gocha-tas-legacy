;---------------------------------------------------------------
; wsetting.hsp: Memory Watch Config
;---------------------------------------------------------------

#ifndef WATCH_SETTINGS_INCLUDED
#define global WATCH_SETTINGS_INCLUDED

;---------------------------------------------------------------

#pack  "memwatch.conf"

WATCH_GUI_INIFILE     = "memwatch.conf.txt"
WATCH_GUI_INIFILE_DEF = "memwatch.conf"

WATCH_INI_MAX_BUF   = 512
WATCH_INI_MAX_PARAM = 16

goto *WATCH_SETTINGS_EOF

;---------------------------------------------------------------
; >> default settings
;---------------------------------------------------------------
*init_settings
	dim watch_pid, WATCH_PROC_SYS_MAX
	dim watch_targetid, WATCH_PROC_SYS_MAX
	dim watch_size, WATCH_SYS_MAX
	dim watch_format, WATCH_SYS_MAX
	dim watch_cmd, WATCH_SYS_MAX
	dim watch_bigendian, WATCH_SYS_MAX
	sdim watch_formula, WATCH_FORMULA_MAX + 1, WATCH_SYS_MAX
	sdim watch_desc, WATCH_DESC_MAX + 1, WATCH_SYS_MAX
	sdim watch_gametitle, WATCH_TITLE_MAX + 1, WATCH_SYS_MAX

	sdim wtarget_fname, 512, WTARGET_MAX
	sdim wtarget_gametitle, WATCH_TITLE_MAX + 1, WTARGET_MAX
	sdim wtarget_gameid, WATCH_GAMEID_MAX + 1, WTARGET_MAX

	dim watch_var, WATCH_PROC_SYS_MAX, WATCH_SYS_MAX
	dim watch_var_old, WATCH_PROC_SYS_MAX, WATCH_SYS_MAX
	dim watch_var_delta, WATCH_PROC_SYS_MAX, WATCH_SYS_MAX
	dim watch_wvar, WATCH_PROC_SYS_MAX, WATCH_SYS_MAX ; short type for graph

	dim watch_pid_temp, WATCH_PROC_SYS_MAX
	sdim watch_addr_str, WATCH_FORMULA_TOKEN_LEN_MAX + 1
	sdim watch_formula_token, WATCH_FORMULA_TOKEN_LEN_MAX + 1, WATCH_FORMULA_TOKEN_MAX

	app_nodblrun = true
	app_always_top = false
	app_proc_prio = NORMAL_PRIORITY_CLASS
	app_thread_prio = THREAD_PRIORITY_IDLE
	watch_smart_update = true
	app_cpulimit = 100

	graph_visible = true

	watch_proc_max = 1
	watch_max = 24
	watch_interval = 17
	watch_use_pause = true
	watch_pause_key = 9

	watch_color_bg          = 0x000000
	watch_color_plain       = 0xCCCCCC
	watch_color_addr        = 0xCC0000
	watch_color_format      = 0x009900
	watch_color_value       = 0xCCCCCC
	watch_color_value_delta = 0x666699
	watch_color_desc        = 0xCCCCCC
	watch_color_rominfo     = 0x999999
	watch_color_graph       = 0xFFFFCC
	watch_color_graphbg     = 0x222266
	watch_font_family = "Courier New"
	watch_font_size = 14
	watch_katakana = false

	wtarget_num = 0

	watch_num = 0
	watch_offset_shift = 0

	gosub *init_settings_port
return

;---------------------------------------------------------------
; >> load settings
;---------------------------------------------------------------
*load_settings
	gosub *init_settings

	ini_fname = WATCH_GUI_INIFILE
	ini_fname_def = WATCH_GUI_INIFILE_DEF
	gosub *load_ini

	ini_fname = WATCH_EMU_INIFILE
	ini_fname_def = WATCH_EMU_INIFILE_DEF
	gosub *load_ini

	; use default target (no targets defined)
	if (wtarget_num == 0): wtarget_num++

	watch_updated = true
	gosub *init_gui
return

;---------------------------------------------------------------
; >> load ini file
;---------------------------------------------------------------
*load_ini
	chdir dir_src
	exist ini_fname: ini_size = strsize
	if (ini_size == -1) {
		bcopy dir_dpm + ini_fname_def, ini_fname

		exist ini_fname: ini_size = strsize
		if (ini_size == -1) {
			dialog "error: " + ini_fname + " not found", 0, APP_NAME
			return
		}
	}

	notesel ini_buf
	noteload ini_fname
	noteunsel

	sdim ini_line_buf, WATCH_INI_MAX_BUF
	sdim ini_argv, WATCH_INI_MAX_BUF, WATCH_INI_MAX_PARAM
	sdim ini_argvex, WATCH_INI_MAX_BUF, WATCH_INI_MAX_PARAM
	sdim ini_gametitle, WATCH_TITLE_MAX

	ini_ofs = 0
	ini_comment = false
	; parse setting (lazy format :/)
	repeat: if (ini_ofs == ini_size): break
		; seek white space
		repeat: c = peek(ini_buf, ini_ofs): if ((c != ' ') & (c != '\t')): break
			ini_ofs++
		loop

		; get new line
		getstr ini_line_buf, ini_buf, ini_ofs: ini_ofs += strsize
		ini_line_len = strlen(ini_line_buf)

		c = peek(ini_line_buf, 0)
		if (c == 0) {
			; null line
		}
		else: if (c == ';') {
			; one line comment
			continue
		}
		else {
			d = peek(ini_line_buf, 1)

			if ((c == '/') & (d == '/')) {
				; one line comment
				continue
			}
			else: if ((c == '/') & (d == '*')) {
				; begin long comment
				ini_comment = true
				continue
			}
			else: if ((c == '*') & (d == '/')) {
				; end long comment
				ini_comment = false
				continue
			}
			if (ini_comment): continue

			if (c == ':') {
				; extra settings
				repeat WATCH_INI_MAX_PARAM
					ini_argvex.cnt = ""
				loop

				ini_argcex = 0
				ini_line_ofs = 1
				repeat: if (ini_line_ofs == ini_line_len): break
					getstr ini_argvex.ini_argcex, ini_line_buf, ini_line_ofs, ':': ini_line_ofs += strsize
					ini_argcex++
				loop
				gosub *ini_onextradef
			}
			else: if (c == '-') {
				; separator
				gosub *ini_onseparator
			}
			else: if (c == '[') {
				; game title switching
				getstr ini_gametitle, ini_line_buf, 1, ']'
				gosub *ini_ongametitle
			}
			else {
				; add watch
				repeat WATCH_INI_MAX_PARAM
					ini_argv.cnt = ""
				loop

				ini_argc = 0
				ini_line_ofs = 0
				repeat: if (ini_line_ofs == ini_line_len): break
					getstr ini_argv.ini_argc, ini_line_buf, ini_line_ofs, ',': ini_line_ofs += strsize
					ini_argc++
				loop

				gosub *ini_onwatchdef
			}
		}
	loop
return

;---------------------------------------------------------------
; >> handle watch definition
;---------------------------------------------------------------
*ini_onwatchdef
	watch_valid = false
	if (ini_argc < 2): return
	if (watch_num == WATCH_SYS_MAX): return
	if (strlen(ini_argv.1) > 3): return

	CharLower varptr(ini_argv.1)

	ini_watch_size = int(strmid(ini_argv.1, 0, 1))
	ini_watch_format = peek(ini_argv.1, 1)
	ini_watch_bigendian = (peek(ini_argv.1, 2) == '*')

	; format check
	if ((ini_watch_size < 1) | (ini_watch_size > 4)): return
	watch_valid_format = false
	repeat: if (watch_format_list.cnt == 0): break
		if (ini_watch_format == watch_format_list.cnt) {
			watch_valid_format = true
			break
		}
	loop
	if (watch_valid_format == false): return

	; add new watch
	watch_cmd.watch_num = WATCH_CMD_READ
	watch_formula.watch_num = strmid(ini_argv.0, 0, WATCH_FORMULA_MAX)
	watch_size.watch_num = ini_watch_size
	watch_format.watch_num = ini_watch_format
	watch_bigendian.watch_num = ini_watch_bigendian
	watch_desc.watch_num = strmid(ini_argv.2, 0, WATCH_DESC_MAX)
	watch_gametitle.watch_num = strmid(ini_gametitle, 0, WATCH_TITLE_MAX)
	; succeed
	watch_valid = true
	watch_num++
return

;---------------------------------------------------------------
; >> handle extra settings
;---------------------------------------------------------------
*ini_onextradef
	      if (ini_argvex.0 == "debug")       { gosub *ini_exdef_debug }
	else: if (ini_argvex.0 == "target")      { gosub *ini_exdef_target }
	else: if (ini_argvex.0 == "singlerun")   { gosub *ini_exdef_singlerun }
	else: if (ini_argvex.0 == "alwaystop")   { gosub *ini_exdef_alwaystop }
	else: if (ini_argvex.0 == "priority")    { gosub *ini_exdef_thread_priority }
	else: if (ini_argvex.0 == "priority-proc")      { gosub *ini_exdef_proc_priority }
	else: if (ini_argvex.0 == "priority-thread")    { gosub *ini_exdef_thread_priority }
	else: if (ini_argvex.0 == "priority")    { gosub *ini_exdef_thread_priority }
	else: if (ini_argvex.0 == "usepause")    { gosub *ini_exdef_usepause }
	else: if (ini_argvex.0 == "graph")       { gosub *ini_exdef_graph }
	else: if (ini_argvex.0 == "colbg")       { gosub *ini_exdef_colbg }
	else: if (ini_argvex.0 == "colplain")    { gosub *ini_exdef_colplain }
	else: if (ini_argvex.0 == "coladdr")     { gosub *ini_exdef_coladdr }
	else: if (ini_argvex.0 == "colformat")   { gosub *ini_exdef_colformat }
	else: if (ini_argvex.0 == "colvalue")    { gosub *ini_exdef_colvalue }
	else: if (ini_argvex.0 == "colvaluedelta") { gosub *ini_exdef_colvaluedelta }
	else: if (ini_argvex.0 == "coldesc")     { gosub *ini_exdef_coldesc }
	else: if (ini_argvex.0 == "colgraph")    { gosub *ini_exdef_colgraph }
	else: if (ini_argvex.0 == "colgraphbg")  { gosub *ini_exdef_colgraphbg }
	else: if (ini_argvex.0 == "colrominfo")  { gosub *ini_exdef_colrominfo }
	else: if (ini_argvex.0 == "fontsize")    { gosub *ini_exdef_fontsize }
	else: if (ini_argvex.0 == "fontfamily")  { gosub *ini_exdef_fontfamily }
	else: if (ini_argvex.0 == "interval")    { gosub *ini_exdef_interval }
	else: if (ini_argvex.0 == "cpulimit")    { gosub *ini_exdef_cpulimit }
	else: if (ini_argvex.0 == "katakana")    { gosub *ini_exdef_katakana }
return

;---------------------------------------------------------------
; >> handle separator
;---------------------------------------------------------------
*ini_onseparator
	if (watch_num == WATCH_SYS_MAX): return

	watch_cmd.watch_num = WATCH_CMD_SEPARATOR
	watch_gametitle.watch_num = strmid(ini_gametitle, 0, WATCH_TITLE_MAX)
	watch_num++
return

;---------------------------------------------------------------
; >> handle game title
;---------------------------------------------------------------
*ini_ongametitle
	if (ini_gametitle != "") {
		; remove padding
		ini_gametitle_len = strlen(ini_gametitle)
		repeat
			if (peek(ini_gametitle, ini_gametitle_len-1) == ' ') {
				poke ini_gametitle, ini_gametitle_len-1, 0
				ini_gametitle_len--
			}
			else {
				break
			}
		loop
	}
return

;---------------------------------------------------------------
; >> boolstr to bool
;---------------------------------------------------------------
*ini_getbool
	ini_bool = int(ini_boolstr)
	if (ini_boolstr == "true")       { ini_bool = true }
	else: if (ini_boolstr == "yes")  { ini_bool = true }
return

;---------------------------------------------------------------
; >> extra settings: debug
;---------------------------------------------------------------
*ini_exdef_debug
	ini_debug = int(ini_argvex.1)
return

;---------------------------------------------------------------
; >> extra settings: target
;---------------------------------------------------------------
*ini_exdef_target
	if (ini_argcex < ini_exdef_target_param_min): return
	if (wtarget_num == WTARGET_MAX): return

	wtarget_fname.wtarget_num           = ini_argvex.1

	gosub *ini_exdef_target_port
	wtarget_num++
return

;---------------------------------------------------------------
; >> extra settings: singlerun
;---------------------------------------------------------------
*ini_exdef_singlerun
	if (ini_argcex != 2): return

	ini_boolstr = ini_argvex.1
	gosub *ini_getbool: app_nodblrun = ini_bool
return

;---------------------------------------------------------------
; >> extra settings: alwaystop
;---------------------------------------------------------------
*ini_exdef_alwaystop
	if (ini_argcex != 2): return

	ini_boolstr = ini_argvex.1
	gosub *ini_getbool: app_always_top = ini_bool
return

;---------------------------------------------------------------
; >> extra settings: process priority
;---------------------------------------------------------------
*ini_exdef_proc_priority
	if (ini_argcex != 2): return

	      if (ini_argvex.1 == "idle")           { app_proc_prio = IDLE_PRIORITY_CLASS }
	else: if (ini_argvex.1 == "below-normal")   { app_proc_prio = BELOW_NORMAL_PRIORITY_CLASS }
	else: if (ini_argvex.1 == "normal")         { app_proc_prio = NORMAL_PRIORITY_CLASS }
	else: if (ini_argvex.1 == "above-normal")   { app_proc_prio = ABOVE_NORMAL_PRIORITY_CLASS }
	else: if (ini_argvex.1 == "high")           { app_proc_prio = HIGH_PRIORITY_CLASS }
	else: if (ini_argvex.1 == "realtime")       { app_proc_prio = REALTIME_PRIORITY_CLASS }
	else {
		app_proc_prio = int(ini_argvex.1)
	}
return

;---------------------------------------------------------------
; >> extra settings: thread priority
;---------------------------------------------------------------
*ini_exdef_thread_priority
	if (ini_argcex != 2): return

	      if (ini_argvex.1 == "idle")       { app_thread_prio = THREAD_PRIORITY_IDLE }
	else: if (ini_argvex.1 == "even-lower") { app_thread_prio = THREAD_PRIORITY_LOWEST }
	else: if (ini_argvex.1 == "lower")      { app_thread_prio = THREAD_PRIORITY_BELOW_NORMAL }
	else: if (ini_argvex.1 == "normal")     { app_thread_prio = THREAD_PRIORITY_NORMAL }
	else: if (ini_argvex.1 == "higher")     { app_thread_prio = THREAD_PRIORITY_ABOVE_NORMAL }
	else: if (ini_argvex.1 == "even-higher"){ app_thread_prio = THREAD_PRIORITY_HIGHEST }
	else: if (ini_argvex.1 == "realtime")   { app_thread_prio = THREAD_PRIORITY_TIME_CRITICAL }
	else {
		app_thread_prio = int(ini_argvex.1)
	}
return

;---------------------------------------------------------------
; >> extra settings: usepause
;---------------------------------------------------------------
*ini_exdef_usepause
	if (ini_argcex != 2): return

	ini_boolstr = ini_argvex.1
	gosub *ini_getbool: watch_use_pause = ini_bool
return

;---------------------------------------------------------------
; >> extra settings: graph
;---------------------------------------------------------------
*ini_exdef_graph
	if (ini_argcex != 2): return

	ini_boolstr = ini_argvex.1
	gosub *ini_getbool: graph_visible = ini_bool
return

;---------------------------------------------------------------
; >> extra settings: colbg
;---------------------------------------------------------------
*ini_exdef_colbg
	if (ini_argcex != 2): return

	watch_color_bg = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colplain
;---------------------------------------------------------------
*ini_exdef_colplain
	if (ini_argcex != 2): return

	watch_color_plain = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: coladdr
;---------------------------------------------------------------
*ini_exdef_coladdr
	if (ini_argcex != 2): return

	watch_color_addr = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colformat
;---------------------------------------------------------------
*ini_exdef_colformat
	if (ini_argcex != 2): return

	watch_color_format = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colvalue
;---------------------------------------------------------------
*ini_exdef_colvalue
	if (ini_argcex != 2): return

	watch_color_value = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colvaluedelta
;---------------------------------------------------------------
*ini_exdef_colvaluedelta
	if (ini_argcex != 2): return

	watch_color_value_delta = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: coldesc
;---------------------------------------------------------------
*ini_exdef_coldesc
	if (ini_argcex != 2): return

	watch_color_desc = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colgraph
;---------------------------------------------------------------
*ini_exdef_colgraph
	if (ini_argcex != 2): return

	watch_color_graph = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colgraphbg
;---------------------------------------------------------------
*ini_exdef_colgraphbg
	if (ini_argcex != 2): return

	watch_color_graphbg = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: colrominfo
;---------------------------------------------------------------
*ini_exdef_colrominfo
	if (ini_argcex != 2): return

	watch_color_rominfo = int("$"+ini_argvex.1) & 0xFFFFFF
return

;---------------------------------------------------------------
; >> extra settings: fontsize
;---------------------------------------------------------------
*ini_exdef_fontsize
	if (ini_argcex != 2): return

	watch_font_size = int(ini_argvex.1)
return

;---------------------------------------------------------------
; >> extra settings: fontfamily
;---------------------------------------------------------------
*ini_exdef_fontfamily
	if (ini_argcex != 2): return

	watch_font_family = ini_argvex.1
return

;---------------------------------------------------------------
; >> extra settings: interval
;---------------------------------------------------------------
*ini_exdef_interval
	if (ini_argcex != 2): return

	watch_interval = int(ini_argvex.1)
return

;---------------------------------------------------------------
; >> extra settings: cpulimit
;---------------------------------------------------------------
*ini_exdef_cpulimit
	if (ini_argcex != 2): return

	app_cpulimit = int(ini_argvex.1)
return

;---------------------------------------------------------------
; >> extra settings: katakana
;---------------------------------------------------------------
*ini_exdef_katakana
	if (ini_argcex != 2): return

	ini_boolstr = ini_argvex.1
	gosub *ini_getbool: watch_katakana = ini_bool
return

;---------------------------------------------------------------
*WATCH_SETTINGS_EOF

sdim ini_fname, 260
sdim ini_fname_def, 260

#endif // !WATCH_SETTINGS_INCLUDED
