;---------------------------------------------------------------
; wmain.hsp: Memory Watch Main
;---------------------------------------------------------------

; TODO: should be removed in near future
#define WATCH_USE_USERVAR

; TODO: modify this
#include "snes9x.hsp"
;#include "vbagba.hsp"
;#include "vbagbx.hsp"

#include "wgeneral.hsp"
#include "wsetting.hsp"
#include "wcore.hsp"
#include "wgui.hsp"

;---------------------------------------------------------------
; >> initialize
;---------------------------------------------------------------
gosub *app_reset
gosub *prohibit_double_run ; must be called after config load

gosub *app_msg_defs

;---------------------------------------------------------------
; >> main loop
;---------------------------------------------------------------
*main
	stop

;---------------------------------------------------------------
; >> definitions for message handling
;---------------------------------------------------------------
*app_msg_defs
	onkey gosub *app_keyproc
	onexit goto *app_exit

	oncmd gosub *app_reset, WM_RESET_MEMWATCH
	oncmd gosub *app_update_mem, WM_TIMER
return

;---------------------------------------------------------------
; >> reset application
;---------------------------------------------------------------
*app_reset
	gosub *load_settings

	GetCurrentProcess : hProc = stat
	SetPriorityClass hProc, app_proc_prio

	GetCurrentThread : hThread = stat
	SetThreadPriority hThread, app_thread_prio

	watch_pause = false
	watch_pause_old = true
return

;---------------------------------------------------------------
; >> exit application
;---------------------------------------------------------------
*app_exit
	end

;---------------------------------------------------------------
; >> on key press
;---------------------------------------------------------------
*app_keyproc
	if (wparam == VKEY_ESC) {
		__EXIT
	}
	else: if (wparam == VKEY_F5) {
		gosub *app_reset
	}
	else: if (wparam == VKEY_ENTER) {
		ShellExecute NULL, NULL, dir_src + WATCH_EMU_INIFILE, NULL, NULL, 1
	}
	else: if (wparam == VKEY_SPACE) {
		ShellExecute NULL, NULL, dir_src + WATCH_GUI_INIFILE, NULL, NULL, 1
	}
	else: if (wparam == VKEY_F1) {
		ShellExecute NULL, NULL, dir_src + APP_MANUAL, NULL, NULL, 1
	}
return

#const WATCH_UPDATE_SKIP_LIMIT 15
;---------------------------------------------------------------
; >> update variables
;---------------------------------------------------------------
*app_update_mem
	oncmd 0
	gosub *pause_check

	if (watch_pause == false) {
		gosub *scan_emu
		gosub *renew_vars
	}

	do_update = (watch_pause == false) && ((watch_smart_update == false) | (watch_updated | (app_skipped_update >= WATCH_UPDATE_SKIP_LIMIT)))
	if (do_update) {
		gosub *refresh_gui
		app_skipped_update = 0
	}
	else {
		app_skipped_update++
	}
	oncmd 1
return

;---------------------------------------------------------------
; >> pause check
;---------------------------------------------------------------
*pause_check
	watch_pause = false

	getkey key_pause, watch_pause_key
	if ((key_pause != 0) & (watch_use_pause != false)) {
		watch_pause = true
	}

	IsIconic hwnd : window_minimized = stat
	if (window_minimized) {
		watch_pause = true
	}

	if (watch_pause != watch_pause_old) {
		watch_pause_old = watch_pause
		if (watch_pause) {
			title "*PAUSED* " + APP_NAMEVER
		}
		else {
			title APP_NAMEVER
		}
	}
return
