;---------------------------------------------------------------
; snes9x.hsp: Memory Watch for Snes9x
;---------------------------------------------------------------

#ifndef WATCH_SNES9X_INCLUDED
#define global WATCH_SNES9X_INCLUDED

#include "wport.hsp"
#include "wutil.hsp"
#include "wgetset.hsp"

;---------------------------------------------------------------
; >> exe info
;---------------------------------------------------------------
#packopt name       "s9xwatch"

#pack  "s9xwatch.conf"

APP_NAME   = "Snes9x Watch"
APP_VER    = "v2 (beta)"
APP_MANUAL = "memwatch.html"

;---------------------------------------------------------------
; >> definitions
;---------------------------------------------------------------
WATCH_EMU_INIFILE     = "s9xwatch.conf.txt"
WATCH_EMU_INIFILE_DEF = "s9xwatch.conf"

WATCH_TITLE_MAX     = 21
WATCH_GAMEID_MAX    = 4

ini_exdef_target_param_min = 8
watch_formula_disp_max = 7

goto *WATCH_SNES9X_EOF

;---------------------------------------------------------------
; >> emulator specific settings
;---------------------------------------------------------------
*init_settings_port
	dim wtarget_addr_mem, WTARGET_MAX
	dim wtarget_addr_aram, WTARGET_MAX
	dim wtarget_offset_ram, WTARGET_MAX
	dim wtarget_offset_sram, WTARGET_MAX
	dim wtarget_offset_fillram, WTARGET_MAX
	dim wtarget_offset_rom, WTARGET_MAX
	dim wtarget_offset_romname, WTARGET_MAX
	dim wtarget_offset_romid, WTARGET_MAX

	; default: snes9x-1.51 (must not be important)
	wtarget_fname.0          = "snes9x*.exe"
	wtarget_addr_mem.0       = 0x6C70E8
	wtarget_offset_ram.0     = 0x24
	wtarget_offset_sram.0    = 0x2C
	wtarget_offset_fillram.0 = 0x34
	wtarget_offset_rom.0     = wtarget_offset_ram.0 + 4
	wtarget_offset_romname.0 = 0xB14E
	wtarget_offset_romid.0   = 0xB17C
	wtarget_addr_aram.0      = 0x6E7D34
return

;---------------------------------------------------------------
; >> matching game title/id
;---------------------------------------------------------------
*match_gametitle_port
	gametitle_matched = false
	if (watch_cur_gametitle != "") {
		if ((watch_cur_gametitle != gui_gametitle) & (watch_cur_gametitle != gui_gameid)) : return
	}
	gametitle_matched = true
return

;---------------------------------------------------------------
; >> set basical variables for memory reading
;---------------------------------------------------------------
*renew_vars_port_init
	proc_memcpy hProc, wtarget_gametitle.proc_cnt, wtarget_addr_mem.wtarget_id + wtarget_offset_romname.wtarget_id, WATCH_TITLE_MAX, 0 : removespace wtarget_gametitle.proc_cnt
	proc_memcpy hProc, wtarget_gameid.proc_cnt, wtarget_addr_mem.wtarget_id + wtarget_offset_romid.wtarget_id, WATCH_GAMEID_MAX, 0

	proc_lpeek hProc, RAM, wtarget_addr_mem.wtarget_id + wtarget_offset_ram.wtarget_id
	proc_lpeek hProc, SRAM, wtarget_addr_mem.wtarget_id + wtarget_offset_sram.wtarget_id
	proc_lpeek hProc, FillRAM, wtarget_addr_mem.wtarget_id + wtarget_offset_fillram.wtarget_id
	proc_lpeek hProc, ROM, wtarget_addr_mem.wtarget_id + wtarget_offset_rom.wtarget_id

	proc_lpeek hProc, ARAM, wtarget_addr_aram.wtarget_id
return

;---------------------------------------------------------------
; >> read value from memory
;---------------------------------------------------------------
*eval_formula_port_readaddr
	gosub *eval_formula_port_readaddr_uservar
	if (eval_uservar) : return

	; fix target memory
	targetMem = RAM
	eval_target = peek(watch_addr_str, 0)
	      if (eval_target == 's') { targetMem = SRAM }
	else: if (eval_target == 'i') { targetMem = FillRAM }
	else: if (eval_target == 'a') { targetMem = ARAM }
	if (targetMem != RAM) : getstr watch_addr_str, watch_addr_str, 1

	eval_hex = (peek(watch_addr_str, 0) == '$')
	if (eval_hex) : getstr watch_addr_str, watch_addr_str, 1

	; get raw address
	if (eval_hex) {
		watch_addr = int("$"+watch_addr_str)
	}
	else {
		watch_addr = int(watch_addr_str)
	}

	if (targetMem == RAM & watch_addr >= 0x800000) {
		targetMem = ROM
	}

	; calc real offset
	watch_offset = watch_addr
	      if (targetMem == RAM) { watch_offset -= 0x7e0000 }
	else: if (targetMem == ROM) { watch_offset -= 0x800000 }

	proc_npeek hProc, watch_val, targetMem, watch_offset, watch_size.watch_id
return

;---------------------------------------------------------------
; >> variables for gocha :P
;---------------------------------------------------------------
*eval_formula_port_readaddr_uservar
	eval_uservar = false
#ifdef WATCH_USE_USERVAR
	if (watch_addr_str == "goemon2_real_xpos_1p") {
		proc_npeek hProc, xpos_1p, RAM, 0x000409, 3
		proc_npeek hProc, camera_x, RAM, 0x001702, 2
		watch_val = (camera_x << 8) + xpos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon2_real_ypos_1p") {
		proc_npeek hProc, ypos_1p, RAM, 0x00040D, 3
		proc_npeek hProc, camera_y, RAM, 0x001712, 2
		watch_val = (camera_y << 8) + ypos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon2_real_xpos_2p") {
		proc_npeek hProc, xpos_2p, RAM, 0x0004D9, 3
		proc_npeek hProc, camera_x, RAM, 0x001702, 2
		watch_val = (camera_x << 8) + xpos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon2_real_ypos_2p") {
		proc_npeek hProc, ypos_2p, RAM, 0x0004DD, 3
		proc_npeek hProc, camera_y, RAM, 0x001712, 2
		watch_val = (camera_y << 8) + ypos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_xpos_1p") {
		proc_npeek hProc, xpos_1p, RAM, 0x000408, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + xpos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_ypos_1p") {
		proc_npeek hProc, ypos_1p, RAM, 0x00040c, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + ypos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_xpos_2p") {
		proc_npeek hProc, xpos_2p, RAM, 0x0004c8, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + xpos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_ypos_2p") {
		proc_npeek hProc, ypos_2p, RAM, 0x0004cc, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + ypos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_xrepos_1p") {
		proc_npeek hProc, xpos_1p, RAM, 0x000480, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + (xpos_1p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_yrepos_1p") {
		proc_npeek hProc, ypos_1p, RAM, 0x000482, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + (ypos_1p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_xrepos_2p") {
		proc_npeek hProc, xpos_2p, RAM, 0x000540, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + (xpos_2p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon3_real_yrepos_2p") {
		proc_npeek hProc, ypos_2p, RAM, 0x000542, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + (ypos_2p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_xpos_1p") {
		proc_npeek hProc, xpos_1p, RAM, 0x000408, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + xpos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_ypos_1p") {
		proc_npeek hProc, ypos_1p, RAM, 0x00040c, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + ypos_1p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_xpos_2p") {
		proc_npeek hProc, xpos_2p, RAM, 0x0004e8, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + xpos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_ypos_2p") {
		proc_npeek hProc, ypos_2p, RAM, 0x0004ec, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + ypos_2p
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_xrepos_1p") {
		proc_npeek hProc, xpos_1p, RAM, 0x000480, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + (xpos_1p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_yrepos_1p") {
		proc_npeek hProc, ypos_1p, RAM, 0x000482, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + (ypos_1p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_xrepos_2p") {
		proc_npeek hProc, xpos_2p, RAM, 0x000560, 2
		proc_npeek hProc, camera_x, RAM, 0x001662, 2
		watch_val = (camera_x << 8) + (xpos_2p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "goemon4_real_yrepos_2p") {
		proc_npeek hProc, ypos_2p, RAM, 0x000562, 2
		proc_npeek hProc, camera_y, RAM, 0x001672, 2
		watch_val = (camera_y << 8) + (ypos_2p << 8)
		eval_uservar = true
	}
	else: if (watch_addr_str == "earthbound_prng") {
		; $C0/8EC7 - http://tasvideos.org/forum/p/73736#73736
		proc_npeek hProc, b24, RAM, 0x000024, 1
		proc_npeek hProc, b26, RAM, 0x000026, 1

		watch_val = ((b24 * b26) >> 4) & 0xff
		eval_uservar = true
	}
	else: if (watch_addr_str == "kdc_total_speed_3") {
		proc_npeek hProc, xvel, RAM, 0x00D9D4, 2 : if (xvel & 0x8000) : xvel -= 0x10000
		proc_npeek hProc, yvel, RAM, 0x00D9D6, 2 : if (yvel & 0x8000) : yvel -= 0x10000
		proc_npeek hProc, zvel, RAM, 0x00D9D8, 2 : if (zvel & 0x8000) : zvel -= 0x10000
		xvel2 = double(xvel) * double(xvel)
		yvel2 = double(yvel) * double(yvel)
		zvel2 = double(zvel) * double(zvel)
		watch_val = int(sqrt(xvel2 + yvel2 + zvel2))
		eval_uservar = true
	}
	else: if (watch_addr_str == "kdc_total_speed_2") {
		proc_npeek hProc, xvel, RAM, 0x00D9D4, 2 : if (xvel & 0x8000) : xvel -= 0x10000
		proc_npeek hProc, yvel, RAM, 0x00D9D6, 2 : if (yvel & 0x8000) : yvel -= 0x10000
		//proc_npeek hProc, zvel, RAM, 0x00D9D8, 2 : if (zvel & 0x8000) : zvel -= 0x10000
		xvel2 = double(xvel) * double(xvel)
		yvel2 = double(yvel) * double(yvel)
		//zvel2 = double(zvel) * double(zvel)
		watch_val = int(sqrt(xvel2 + yvel2))
		eval_uservar = true
	}
#endif
return

;---------------------------------------------------------------
; >> emulator identity
;---------------------------------------------------------------
*ini_exdef_target_port
	wtarget_addr_mem.wtarget_num        = int("$"+ini_argvex.2)
	wtarget_offset_ram.wtarget_num      = int("$"+ini_argvex.3)
	wtarget_offset_sram.wtarget_num     = int("$"+ini_argvex.4)
	wtarget_offset_fillram.wtarget_num  = int("$"+ini_argvex.5)
	wtarget_offset_rom.wtarget_num      = wtarget_offset_rom.wtarget_num + 4
	wtarget_offset_romname.wtarget_num  = int("$"+ini_argvex.6)
	wtarget_offset_romid.wtarget_num    = int("$"+ini_argvex.7)
	wtarget_addr_aram.wtarget_num       = int("$"+ini_argvex.8)
return

;---------------------------------------------------------------
*WATCH_SNES9X_EOF

#endif // !WATCH_SNES9X_INCLUDED
