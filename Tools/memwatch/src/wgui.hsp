;---------------------------------------------------------------
; wgui.hsp: Memory Watch Display Core
;---------------------------------------------------------------

#ifndef WATCH_GUI_INCLUDED
#define global WATCH_GUI_INCLUDED

WATCH_CHAR_PER_LINE = 32


WATCH_TIMER_ID = 0x0001

goto *WATCH_GUI_EOF

;---------------------------------------------------------------
; >> initialize GUI interface
;---------------------------------------------------------------
*init_gui
	if (wTimer) {
		KillTimer hwnd, wTimer
		wTimer = NULL
	}

	screen WID_MAIN, ginfo_dispx, ginfo_dispy, 2: cls 4 : title APP_NAMEVER

	resize = true: gosub *reset_gui
	SetForegroundWindow hwnd

	SetTimer hwnd, WATCH_TIMER_ID, watch_interval, NULL : wTimer = stat
return

;---------------------------------------------------------------
; >> reset window
;---------------------------------------------------------------
*reset_gui
	font watch_font_family, watch_font_size: mes " "
	font_width = ginfo_mesx
	font_height = ginfo_mesy

	margin = 15
	desc_width = font_width * (WATCH_DESC_MAX_DISP + 1)
	graph_width = ((font_width - 1) * WATCH_CHAR_PER_LINE)
	if (graph_visible): graph_height = 2: else: graph_height = 0
	watch_width = font_width * WATCH_CHAR_PER_LINE
	watch_height = (font_height + graph_height) * (watch_max + 1)

	if (resize) {
		win_width = desc_width + watch_width * watch_proc_max + (margin * 2)
		win_height = watch_height + font_height + (margin * 3)
		width win_width, win_height
	}
	if (app_always_top): gsel WID_MAIN, 2: else: gsel WID_MAIN, 1
return

;---------------------------------------------------------------
; >> refresh back buffer (draw variables)
;---------------------------------------------------------------
*refresh_gui
	redraw 0
		hexcolor watch_color_bg: boxf

		; put descriptions
		hexcolor watch_color_desc
		pos_x = margin: pos_y = margin + font_height + (graph_height/2)
		if (actproc != -1) {
			watch_displayed = 0
			gui_gametitle = safeankif(wtarget_gametitle.actproc)
			gui_gameid = safeankif(wtarget_gameid.actproc)
			repeat watch_num: watch_id = cnt
				if ((watch_cmd.watch_id != WATCH_CMD_READ) & (watch_cmd.watch_id != WATCH_CMD_SEPARATOR)): continue
				watch_cur_gametitle = safeankif(watch_gametitle.watch_id)
				gosub *match_gametitle_port : if (gametitle_matched == false) : continue

				if (watch_cmd.watch_id == WATCH_CMD_READ) {
					pos pos_x, pos_y: mes strmid(watch_desc.watch_id, 0, WATCH_DESC_MAX_DISP)
				}
				pos_y += (font_height + graph_height)

				watch_displayed++
				if (watch_displayed == watch_max) : break
			loop
		}

		; put variables
		hexcolor watch_color_plain
		pos_x_base = pos_x + (font_width * (WATCH_DESC_MAX_DISP + 1))
		repeat watch_pid_num: proc_cnt = cnt: if (proc_cnt == watch_proc_max): break
			gui_gametitle = safeankif(wtarget_gametitle.proc_cnt)
			gui_gameid = safeankif(wtarget_gameid.proc_cnt)

			pos_x = pos_x_base: pos_y = margin: if (proc_cnt == actproc) { svar = " *" } else { svar = "" }
			pos pos_x, pos_y: hexcolor watch_color_plain: mes "[Process " + strf("%d", proc_cnt) + "]" + svar : pos_y += font_height
			watch_displayed = 0
			repeat watch_num: watch_id = cnt
				if ((watch_cmd.watch_id != WATCH_CMD_READ) & (watch_cmd.watch_id != WATCH_CMD_SEPARATOR)): continue
				watch_cur_gametitle = safeankif(watch_gametitle.watch_id)
				gosub *match_gametitle_port : if (gametitle_matched == false) : continue

				if (watch_cmd.watch_id == WATCH_CMD_READ) {
					gosub *watch_get_svar
					pos_x = pos_x_base
					pos pos_x, pos_y: hexcolor watch_color_addr  : mes strmid(watch_formula.watch_id, 0, watch_formula_disp_max): pos_x += (font_width * watch_formula_disp_max)
					pos pos_x, pos_y: hexcolor watch_color_plain : mes ",": pos_x += font_width
					pos pos_x, pos_y: hexcolor watch_color_format: mes strf("%d", watch_size.watch_id) + strf("%c", watch_format.watch_id): pos_x += (font_width << 1)
;					pos pos_x, pos_y: hexcolor watch_color_plain : mes " = ": pos_x += (font_width * 3)
					pos_x += font_width
					pos pos_x, pos_y: hexcolor watch_color_value : mes svar: pos_x += (font_width * strlen(svar))
					if (watch_format.watch_id != WATCH_FORMAT_BOOL) {
						pos pos_x, pos_y: hexcolor watch_color_value_delta : mes " " + svar_delta + ""
					}

					pos_x = pos_x_base
					pos_y += font_height
					hexcolor watch_color_graphbg: boxf pos_x, pos_y, pos_x + graph_width, pos_y + graph_height - 1
					hexcolor watch_color_graph
					if (watch_format.watch_id == WATCH_FORMAT_SINT) {
						boxf pos_x + (graph_width/2), pos_y, pos_x + (graph_width/2) + ((graph_width/2) * (watch_wvar.proc_cnt.watch_id - 0x8000)/0x8000), pos_y + graph_height - 1
					}
					else {
						boxf pos_x, pos_y, pos_x + (graph_width * watch_wvar.proc_cnt.watch_id/0x10000), pos_y + graph_height - 1
					}
					pos_y += graph_height
				}
				else {
					pos_y += (font_height + graph_height)
				}
				watch_displayed++
				if (watch_displayed == watch_max) : break
			loop
			pos_x = pos_x_base: pos_y = watch_height + margin + font_height

			if ((gui_gametitle != "") | (gui_gameid != "")) {
				pos pos_x, pos_y: hexcolor watch_color_rominfo: mes "'"+gui_gametitle+"'" + " (" + gui_gameid + ")"
			}

			pos_x_base += (font_width * WATCH_CHAR_PER_LINE)
		loop
	redraw 1
	redraw 0
	watch_updated = false
return

;---------------------------------------------------------------
; >> convert watch var (int to str, to show)
;---------------------------------------------------------------
*watch_get_svar
	gui_watch_val = watch_var.proc_cnt.watch_id
	gui_watch_hex_with_sign = false
	gosub *watch_get_svar_core : svar = gui_watch_sval

	gui_watch_val = watch_var_delta.proc_cnt.watch_id
	gosub *watch_get_svar_bool : svar_delta = gui_watch_sval
	if (watch_format.watch_id != WATCH_FORMAT_BOOL) {
		svar_delta = strf("%d", gui_watch_val)
	}
return

;---------------------------------------------------------------
; >> convert watch var (int to str, to show)
;---------------------------------------------------------------
*watch_get_svar_core
	gosub *watch_get_svar_bool
	if (watch_format.watch_id == WATCH_FORMAT_HEX) {
		sformat = "%0" + (watch_size.watch_id << 1) + "X"
	}
	else: if (watch_format.watch_id == WATCH_FORMAT_SINT) {
		sformat = "%d"
	}
	else {
		sformat = "%u"
	}
	gui_watch_sval = strf(sformat, gui_watch_val)

	if (gui_watch_hex_with_sign) {
		if (watch_format.watch_id == WATCH_FORMAT_HEX) {
			gui_watch_sval = strf("%d", gui_watch_val); + " (" + gui_watch_sval + ")"
		}
	}
return

;---------------------------------------------------------------
; >> convert watch var (bool)
;---------------------------------------------------------------
*watch_get_svar_bool
	if (watch_format.watch_id == WATCH_FORMAT_BOOL) {
		if (gui_watch_val) {
			gui_watch_sval = "true"
		}
		else {
			gui_watch_sval = "false"
		}
	}
return

;---------------------------------------------------------------
*WATCH_GUI_EOF
#endif // !WATCH_GUI_INCLUDED
