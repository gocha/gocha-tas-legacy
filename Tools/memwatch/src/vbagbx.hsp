;---------------------------------------------------------------
; vbagbx.hsp: Memory Watch for VisualBoyAdvance (GB Variant)
;---------------------------------------------------------------

#ifndef WATCH_VBAGBX_INCLUDED
#define global WATCH_VBAGBX_INCLUDED

#include "wport.hsp"
#include "wutil.hsp"
#include "wgetset.hsp"

;---------------------------------------------------------------
; >> exe info
;---------------------------------------------------------------
#packopt name       "vbxwatch"

#pack  "vbxwatch.conf"

APP_NAME   = "VBA/GB* Watch"
APP_VER    = "v2 (beta)"
APP_MANUAL = "memwatch.html"

;---------------------------------------------------------------
; >> definitions
;---------------------------------------------------------------
WATCH_EMU_INIFILE     = "vbxwatch.conf.txt"
WATCH_EMU_INIFILE_DEF = "vbxwatch.conf"

WATCH_TITLE_MAX    = 15
WATCH_GAMEID_MAX   = 4

ini_exdef_target_param_min = 2
watch_formula_disp_max = 5

goto *WATCH_VBAGBX_EOF

;---------------------------------------------------------------
; >> emulator specific settings
;---------------------------------------------------------------
*init_settings_port
	dim wtarget_addr_memmap, WTARGET_MAX : dim gbmemmap, 16

	; default: vba-rerecording-19.3? (must not be important)
	wtarget_fname.0       = "vba-rerecording*.exe"
	wtarget_addr_memmap.0 = 0x73A820
return

;---------------------------------------------------------------
; >> matching game title/id
;---------------------------------------------------------------
*match_gametitle_port
	gametitle_matched = false
	if (watch_cur_gametitle != "") {
		if ((watch_cur_gametitle != gui_gametitle) & (watch_cur_gametitle != gui_gameid)) : return
	}
	gametitle_matched = true
return

;---------------------------------------------------------------
; >> set basical variables for memory reading
;---------------------------------------------------------------
*renew_vars_port_init
	repeat 16
		proc_lpeek hProc, gbmemmap.cnt, wtarget_addr_memmap.wtarget_id + (4 * cnt)
	loop

	proc_memcpy hProc, wtarget_gametitle.proc_cnt, gbmemmap.0 + 0x134, WATCH_TITLE_MAX, 0: poke wtarget_gametitle.proc_cnt, WATCH_TITLE_MAX, 0
	removespace wtarget_gametitle.proc_cnt
	wtarget_gameid.proc_cnt = ""
return

;---------------------------------------------------------------
; >> read value from memory
;---------------------------------------------------------------
*eval_formula_port_readaddr
	watch_val = 0

	eval_hex = (peek(watch_addr_str, 0) == '$')
	if (eval_hex) : getstr watch_addr_str, watch_addr_str, 1

	gosub *eval_formula_port_readaddr_uservar
	if (eval_uservar) : return

	; get raw address
	if (eval_hex) {
		watch_addr = int("$"+watch_addr_str)
	}
	else {
		watch_addr = int(watch_addr_str)
	}

	; fix target address
	watch_offset = watch_addr
	targetMem = watch_offset >> 12
	targetMem = gbmemmap.targetMem
	watch_offset = watch_offset & 0x0FFF

	proc_npeek hProc, watch_val, targetMem, watch_offset, watch_size.watch_id
return

;---------------------------------------------------------------
; >> variables for gocha :P
;---------------------------------------------------------------
*eval_formula_port_readaddr_uservar
	eval_uservar = false
#ifdef WATCH_USE_USERVAR
	if (watch_addr_str == "blah_blah") {
		watch_val = 0
		eval_uservar = true
	}
#endif
return

;---------------------------------------------------------------
; >> emulator identity
;---------------------------------------------------------------
*ini_exdef_target_port
	wtarget_addr_memmap.wtarget_num   = int("$"+ini_argvex.2)
return

;---------------------------------------------------------------
*WATCH_VBAGBX_EOF

#endif // !WATCH_VBAGBX_INCLUDED
