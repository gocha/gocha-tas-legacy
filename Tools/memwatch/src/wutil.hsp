;---------------------------------------------------------------
; memwutil.hsp: XXXXXX memory watcher (with HSP 3.0)
;---------------------------------------------------------------

#ifndef WATCH_UTIL_INCLUDED
#define global WATCH_UTIL_INCLUDED

#include "wport.hsp"

goto *WATCH_UTIL_EOF

#define ctype ROL8(%1,%2)  (((%1) << (%2) & 0xff)   | ((%1 & 0xff)   >> ( 8 - (%2))))
#define ctype ROL16(%1,%2) (((%1) << (%2) & 0xffff) | ((%1 & 0xffff) >> (16 - (%2))))
#define ctype ROR8(%1,%2)  (((%1 & 0xff)   >> (%2)) | (((%1) & (0xff   >> ( 8 - (%2)))) << ( 8 - (%2))))
#define ctype ROR16(%1,%2) (((%1 & 0xffff) >> (%2)) | (((%1) & (0xffff >> (16 - (%2)))) << (16 - (%2))))

;---------------------------------------------------------------

#module Watch_Util

#deffunc hexcolor int _p1
	color _p1 >> 16, _p1 >> 8, _p1
return

#defcfunc isdblrun str _p1, var _p2
	result = true

	CreateFileMapping INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, 4, _p1 : hMap = stat
	if (hMap != NULL) {
		MapViewOfFile hMap, FILE_MAP_ALL_ACCESS, 0, 0, 4 : map_localp = stat
		if (map_localp != NULL) {
			dupptr map_local, map_localp, 1
			GetLastError : last_error = stat
			if (last_error == ERROR_ALREADY_EXISTS) {
				_p2 = map_local
			}
			else {
				map_local = _p2
				result = false
			}
		}
	}
return result

#defcfunc safeank str _p1
	asciistr = _p1

	repeat: c = peek(asciistr, cnt): if (c == 0): break
		if ((c < 32) | (c >= 127)) {
			;poke asciistr, cnt, '?'
			poke asciistr, cnt, '_'
		}
	loop
return asciistr

#deffunc removespace var _p1
	i = strlen(_p1) - 1
	repeat : if (i < 0) : break
		c = peek(_p1, i)
		if ((c != ' ') & (c != '\t')) : break
		poke _p1, i, 0: i--
	loop
return

#global

;---------------------------------------------------------------
*WATCH_UTIL_EOF
#endif // !WATCH_UTIL_INCLUDED
